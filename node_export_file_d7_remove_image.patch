diff --git a/modules/node_export_feeds/FeedsNodeExportParser.inc b/modules/node_export_feeds/FeedsNodeExportParser.inc
diff --git a/modules/node_export_feeds/FeedsNodeExportProcessor.inc b/modules/node_export_feeds/FeedsNodeExportProcessor.inc
diff --git a/modules/node_export_file/node_export_file.info b/modules/node_export_file/node_export_file.info
index 9b3a3c1..7fff861 100755
--- a/modules/node_export_file/node_export_file.info
+++ b/modules/node_export_file/node_export_file.info
@@ -1,5 +1,5 @@
 name = Node export file
-description = "Export helper module for handling files (FileField, Upload, and Image)."
+description = "Export helper module for handling files (FileField, and Upload)."
 dependencies[] = node_export
 core = 7.x
 package = "Node export"
\ No newline at end of file
diff --git a/modules/node_export_file/node_export_file.module b/modules/node_export_file/node_export_file.module
index 43bac56..b44c3dc 100755
--- a/modules/node_export_file/node_export_file.module
+++ b/modules/node_export_file/node_export_file.module
@@ -4,7 +4,7 @@
  * @file
  * The Node export file module.
  *
- * Export helper module for handling CCK FileFields, Uploaded files, and Images.
+ * Export helper module for handling CCK FileFields, and Uploaded files.
  */
 
 define('NODE_EXPORT_FILE_FILES_DIR_SUBSTITUTION', '#FILES_DIRECTORY_PATH#');
@@ -36,8 +36,8 @@ function node_export_file_form_node_export_settings_alter(&$form, &$form_state,
     '#title' => t('File export mode'),
     '#default_value' => variable_get('node_export_file_mode', 'inline'),
     '#options' => array(
-      'inline' => t('Inline Base64'), 
-      'local' => t('Local file export'), 
+      'inline' => t('Inline Base64'),
+      'local' => t('Local file export'),
       'remote' => t('Remote file export, URL')
      ),
     '#description' => t('Should file exports be inline inside the export code, a local path to the file, or a URL?  Inline Base64 is the easiest option to use but can sometimes exceed PHP post limits, local and remote modes are more useful for power users.  <em>NOTE: Remote mode only works with a public files directory.</em>'),
@@ -75,7 +75,6 @@ function node_export_file_node_export_node_alter(&$node, $original_node) {
   if (in_array($node->type, $types)) {
     node_export_file_alter_filefield($node, $original_node, 'export', 'node_export_file_filefield_filter');
     node_export_file_alter_upload($node, $original_node, 'export');
-    node_export_file_alter_image($node, $original_node, 'export');
   }
 }
 
@@ -85,7 +84,6 @@ function node_export_file_node_export_node_alter(&$node, $original_node) {
 function node_export_file_node_export_node_import_alter(&$node, $original_node) {
   node_export_file_alter_filefield($node, $original_node, 'import', 'node_export_file_filefield_filter');
   node_export_file_alter_upload($node, $original_node, 'import');
-  node_export_file_alter_image($node, $original_node, 'import');
 }
 
 /**
@@ -122,63 +120,7 @@ function node_export_file_upload_filter($attribute, $field) {
 }
 
 /**
- * Handles importing and exporting photos uploaded to image nodes.  This
- * is more complicated than for filefields or upload attachments because
- * the image module doesn't attach the file objects for images to the node.
- * To get around this we create a special 'image_export_files' attribute
- * on the node.  This will be stripped off when the node is imported.
- */
-function node_export_file_alter_image(&$node, $original_node, $op) {
-  // Only act on image nodes
-  if ($node->type != 'image') {
-    return;
-  }
-
-  if ($op == 'export') {
-    // Only export the original image, the build-derivatives attribute
-    // is set later to rebuild all image sizes on the import side
-    $result = db_query(
-      "SELECT f.*
-       FROM {image} AS i
-       INNER JOIN {file_managed} AS f ON i.fid = f.fid
-       WHERE i.nid = :nid AND f.filename = :filename",
-      array(
-        ':nid' => $original_node->nid,
-        ':filename' => IMAGE_ORIGINAL,
-      )
-    );
-    $node->image_export_files = array($result->fetchObject());
-
-    // Unset the images array, this will cause problems during the
-    // 'prepopulate' step during import
-    $node->images = array();
-
-    $node->rebuild_images = TRUE;
-  }
-
-  node_export_file_alter_filefield($node, $original_node, $op, 'node_export_file_image_filter');
-
-  // The file objects have been saved to the database but the rest of the
-  // image tables have not been hooked up yet.
-  if (($op == 'import') && !empty($node->image_export_files)) {
-    $node->images = array();
-
-    // Create the images array based on the imported files
-    foreach ($node->image_export_files as $file) {
-      $node->images[$file->filename] = $file->uri;
-    }
-  }
-}
-
-/**
- * Upload module field filter callback used in node_export_file_alter_filefield().
- */
-function node_export_file_image_filter($attribute, $field) {
-  return ($attribute == 'image_export_files' && is_array($field));
-}
-
-/**
- * Abstract hook_node_export_node_alter() used by filefield, upload, and image.
+ * Abstract hook_node_export_node_alter() used by filefield, and upload.
  */
 function node_export_file_alter_filefield(&$node, $original_node, $op, $attribute_filter_callback) {
   $assets_path = variable_get('node_export_file_assets_path', '');
@@ -200,30 +142,30 @@ function node_export_file_alter_filefield(&$node, $original_node, $op, $attribut
       return;
     }
   }
-  
+
   // get all fields from this node type
   $fields = field_info_instances("node", $node->type);
   foreach($fields as $field_instance) {
-    
+
     // load field infos to check the type
     $field = &$node->{$field_instance['field_name']};
     $info = field_info_field($field_instance['field_name']);
-    
+
     // check if this field should implement file import/export system
     if (in_array($info['type'], array("image", "file"))) {
-      
-      // we need to loop into each language because i18n translation can build 
+
+      // we need to loop into each language because i18n translation can build
       // fields with different language than the node one.
       foreach($field as $language => $files) {
         if (is_array($files)) {
           foreach($files as $i => $file) {
-            
+
             // convert file to array to stay into the default node_export_file format
             $file = (object) $file;
-            
+
             // When exporting a node ...
             if ($op == 'export') {
-              
+
               // Check the file
               if (!isset($file->uri) || !is_file($file->uri)) {
                 drupal_set_message(t("File upload field found on node, but doesn't exist on disk? '!path'", array('!path' => $file->uri)), 'error');
@@ -232,14 +174,14 @@ function node_export_file_alter_filefield(&$node, $original_node, $op, $attribut
 
               // export file
               $export_data = node_export_file_get_export_data($file, $export_mode, $assets_path);
-              
+
               // build the field again, and remove fid to be sure that imported node
               // will rebuild the file again, or keep an existing one with a different fid
               $field[$language][$i]['fid'] = NULL;
               $field[$language][$i][$export_var] = $export_data;
               node_export_file_clean_local_file_path($field[$language][$i]['uri']);
             }
-            
+
             // When importing a node ...
             elseif ($op == 'import') {
               $result = node_export_file_import_file($file);
diff --git a/modules/node_export_relation/node_export_relation.node_reference.inc b/modules/node_export_relation/node_export_relation.node_reference.inc
diff --git a/modules/node_export_relation/node_export_relation.og.inc b/modules/node_export_relation/node_export_relation.og.inc
diff --git a/modules/node_export_relation/node_export_relation.taxonomy.inc b/modules/node_export_relation/node_export_relation.taxonomy.inc
diff --git a/node_export.drush.inc b/node_export.drush.inc
